
# ----------------------------------------------------------------------------
# Copyright 2014 Nervana Systems Inc.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ----------------------------------------------------------------------------
# Experiment settings to train/test a quick CNN on CIFAR10.
# (This is not going to be a very accurate CNN.)

!obj:experiments.FitPredictErrorExperiment {

  dataset: &ds !obj:datasets.CIFAR100 {
    repo_path: '~/data',
    sample_pct: 100,
  },

  metrics: {
    train: [
      !obj:metrics.MisclassPercentage {},
    ],
    test: [
      !obj:metrics.MisclassPercentage {},
    ],
  },

  weight_inits: &wt_init !obj:params.UniformValGen {
    low: -0.1,
    high: 0.1,
  },

  weight_inits: &wt_init0 !obj:params.GaussianValGen {
    scale: .01,
    bias_init: 0.0,
  },

  lrule: &gdm {
    type: gradient_descent_momentum_weight_decay,
    lr_params: {
      learning_rate: 0.17,
      weight_decay: 0.0008,
      schedule: {
          type: step,
          ratio: 0.15,
          step_epochs: 20,
      },
      momentum_params: {
        type: linear_monotone,
        coef: 0.5,
      },
    },
  },
  # CNN model specification
  # essentially a multi-layer perceptron with convolutional and pooling layers
  model: !obj:models.MLP {
    serialized_path: './saved_models/maxout_copy.prm',
    num_epochs: 74,
    batch_norm: True,
    batch_size: &bs 128,
    layers: [
      &datalayer !obj:layers.DataLayer {
        name: d0,
        is_local: True,
        nofm: 3,
        ofmshape: [32, 32],
      },
      !obj:layers.ConvLayer {
        name: layer1,
        lrule_init: *gdm,
        weight_init: *wt_init0,
        nofm: 128,
        fshape: [8, 8],
        activation: !obj:transforms.RectLin {},
        pad: 4,
      },
      !obj:layers.PoolingLayer {
        name: layer2,
        op: 'max',
        fshape: [4, 4],
        stride: 2,
      },
       !obj:layers.CrossMapResponseNormLayer {
         name: layer3,
         ksize: 5,
         alpha: 0.0001,
         beta: 0.9,
       },
      !obj:layers.DropOutLayer {
        name: do1,
        keep: 0.8,
      },
       !obj:layers.ConvLayer {
        name: layer4,
        lrule_init: *gdm,
        nofm: 192,
        fshape: [8, 8],
        weight_init: *wt_init0,
        activation: !obj:transforms.RectLin {},
        pad: 3,
      },
      !obj:layers.PoolingLayer {
        name: layer5,
        op: 'max',
        fshape: [4, 4],
        stride: 2,
      },
       !obj:layers.CrossMapResponseNormLayer {
         name: layer6,
         ksize: 5,
         alpha: 0.0001,
         beta: 1.9365,
       },
      !obj:layers.DropOutLayer {
        name: do2,
        keep: 0.61,
      },
     !obj:layers.ConvLayer {
        name: layer7,
        lrule_init: *gdm,
        nofm: 256,
        fshape: [5, 5],
        weight_init: *wt_init0,
        activation: !obj:transforms.RectLin {},
        pad: 3,
      },
      !obj:layers.PoolingLayer {
        name: layer8,
        op: 'max',
        fshape: [2, 2],
        stride: 2,
      },
       !obj:layers.CrossMapResponseNormLayer {
         name: layer9,
         ksize: 5,
         alpha: 0.0001,
         beta: 1.9365,
       },
      !obj:layers.DropOutLayer {
        name: do3,
        keep: 0.37,
      },
      !obj:layers.FCLayer {
        name: layer10,
        nout: 1024,
        lrule_init: *gdm,
        weight_init: *wt_init,
        activation: !obj:transforms.RectLin {},
      },
      !obj:layers.DropOutLayer {
        name: do4,
        keep: 0.3,
      },
      &lastlayer !obj:layers.FCLayer {
        name: output,
        lrule_init: *gdm,
        weight_init: *wt_init,
        nout: 100,
        activation: !obj:transforms.Softmax {},
      },
      &costlayer !obj:layers.CostLayer {
        name: cost,
        ref_layer: *datalayer,
        cost: !obj:transforms.CrossEntropy {},
      },
    ],
  },

  # logging options that are passed to logging.basicConfig
  # level value thresholds (set level lower to display them):
  #   CRITICAL 50
  #   ERROR    40
  #   WARNING  30
  #   INFO     20
  #   DEBUG    10
  #   NOTSET    0
  logging: {
    level: 20,
    format: '%(asctime)-15s %(levelname)s:%(module)s - %(message)s'
  },
}

